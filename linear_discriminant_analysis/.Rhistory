library(MASS)
frame<-read.csv("LoanData.csv")
head(frame)
#standardize
frame$stcreditBorrowsScore<-(frame$CreditBorrowsScore-mean(frame$CreditBorrowsScore))/sd(frame$CreditBorrowsScore)
frame$stDebttoIncome<-(frame$DebttoIncome-mean(frame$DebttoIncome))/sd(frame$DebttoIncome)
#create training and testing data sets
ind<-sample(1:nrow(frame), 40)
print(ind)
train_data<-frame[ind,]
test_data<-frame[-ind,]
print(test_data)
#fit lda model using training data set
fit=lda(Group~stcreditBorrowsScore+stDebttoIncome, data=train_data)
print(fit)
plot(fit)
#predict using test data set and evaluate accuracy
pred<-predict(fit, newdata=test_data)
print(pred)
print(pred)
print(pred$class)
CT<-table(test_data$Group, pred$class)
print(CT)
mean(test_data$Group == pred$class)
status_code<-ifelse(test_data$Group == pred$class, 1, ifelse(as.numeric(test_data$Group)>as.numeric(pred$class),2,3))
dis_data<-cbind(test_data, pred$class, status_code)
print(dis_data)
status_code<-ifelse(test_data$Group == pred$class, 1, ifelse(as.numeric(test_data$Group)>as.numeric(pred$class),2,3))
dis_data<-cbind(test_data, pred$class, status_code)
print(dis_data)
plot(dis_data$stcreditBorrowsScore, dis_data$stDebttoIncome, pch=16, col=dis_data$status_code)
legend(x="topright", legend=c("Correct","Low Cat as High", "High Cat as Low"), pch=16, col=1:3)
frame.head()
head(frame)
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/hw7/HRdata2groups.csv")
head(frame)
for (x in frame$PerfScoreID) {
print(x)
}
for (x in frame$PerfScoreID) {
new_level <- list()
if (x==1 | x==2) {
new_level <- append(new_level, 0)
} else {
new_level <- append(new_level, 1)
}
}
new_level
len(new_level)
length(new_level)
frame[i, PerfScoreID]
frame[1, PerfScoreID]
frame[1, ]
for (i in 1:nrow(frame)) {
new_level <- list()
if (frame[i, ]$PerfScoreID==1 | frame[i, ]$PerfScoreID==2) {
new_level <- append(new_level, 0)
} else {
new_level <- append(new_level, 1)
}
}
length(new_level)
new_level <- list()
for (i in 1:nrow(frame)) {
if (frame[i, ]$PerfScoreID==1 | frame[i, ]$PerfScoreID==2) {
new_level <- append(new_level, 0)
} else {
new_level <- append(new_level, 1)
}
}
length(new_level)
length(frame)
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/hw7/HRdata2groups.csv")
head(frame)
new_level <- list()
for (i in 1:nrow(frame)) {
if (frame[i, ]$PerfScoreID==1 | frame[i, ]$PerfScoreID==2) {
new_level <- append(new_level, 0)
} else {
new_level <- append(new_level, 1)
}
}
length(new_level)
length(frame)
nrow(frame)
frame$score <- new_level
head(frame)
library(MASS)
frame$Termd<-(frame$Termd-mean(frame$Termd))/sd(frame$Termd)
frame$EmpStatusID<-(frame$EmpStatusID-mean(frame$EmpStatusID))/sd(frame$EmpStatusID)
frame$EmpSatisfaction<-(frame$EmpSatisfaction-mean(frame$EmpSatisfaction))/sd(frame$EmpSatisfaction)
frame$MechanicalApt<-(frame$MechanicalApt-mean(frame$MechanicalApt)/sd(frame$MechanicalApt)
frame$VerbalApt<-(frame$VerbalApt-mean(frame$VerbalApt)/sd(frame$VerbalApt)
frame$MechanicalApt<-(frame$MechanicalApt-mean(frame$MechanicalApt)/sd(frame$MechanicalApt)
frame$VerbalApt<-(frame$VerbalApt-mean(frame$VerbalApt)/sd(frame$VerbalApt)
frame$Termd<-(frame$Termd-mean(frame$Termd))/sd(frame$Termd)
frame$EmpStatusID<-(frame$EmpStatusID-mean(frame$EmpStatusID))/sd(frame$EmpStatusID)
frame$EmpSatisfaction<-(frame$EmpSatisfaction-mean(frame$EmpSatisfaction))/sd(frame$EmpSatisfaction)
frame$MechanicalApt<-(frame$MechanicalApt-mean(frame$MechanicalApt)/sd(frame$MechanicalApt)
frame$VerbalApt<-(frame$VerbalApt-mean(frame$VerbalApt)/sd(frame$VerbalApt)
frame$MechanicalApt<-(frame$MechanicalApt-mean(frame$MechanicalApt))/sd(frame$MechanicalApt)
frame$VerbalApt<-(frame$VerbalApt-mean(frame$VerbalApt)/sd(frame$VerbalApt)
head(frame)
frame$VerbalApt<-(frame$VerbalApt-mean(frame$VerbalApt))/sd(frame$VerbalApt)
frame$Termd<-(frame$Termd-mean(frame$Termd))/sd(frame$Termd)
frame$EmpStatusID<-(frame$EmpStatusID-mean(frame$EmpStatusID))/sd(frame$EmpStatusID)
frame$EmpSatisfaction<-(frame$EmpSatisfaction-mean(frame$EmpSatisfaction))/sd(frame$EmpSatisfaction)
frame$MechanicalApt<-(frame$MechanicalApt-mean(frame$MechanicalApt))/sd(frame$MechanicalApt)
frame$VerbalApt<-(frame$VerbalApt-mean(frame$VerbalApt))/sd(frame$VerbalApt)
head(frame)
#fit lda model using training data set
fit=lda(score ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt, data=frame)
frame$score <- as.numeric(frame$score)
head(frame)
#fit lda model using training data set
fit=lda(score ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt, data=frame)
print(fit)
plot(fit)
library(rms)
library(rms)
ologit<-lrm(score ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt, data=frame)
print(ologit)
library(MASS)
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/hw7/HRdata2groups.csv")
head(frame)
new_level <- list()
for (i in 1:nrow(frame)) {
if (frame[i, ]$PerfScoreID==1 | frame[i, ]$PerfScoreID==2) {
new_level <- append(new_level, 0)
} else {
new_level <- append(new_level, 1)
}
}
frame$score <- new_level
#standardize
frame$Termd<-(frame$Termd-mean(frame$Termd))/sd(frame$Termd)
frame$EmpStatusID<-(frame$EmpStatusID-mean(frame$EmpStatusID))/sd(frame$EmpStatusID)
frame$EmpSatisfaction<-(frame$EmpSatisfaction-mean(frame$EmpSatisfaction))/sd(frame$EmpSatisfaction)
frame$MechanicalApt<-(frame$MechanicalApt-mean(frame$MechanicalApt))/sd(frame$MechanicalApt)
frame$VerbalApt<-(frame$VerbalApt-mean(frame$VerbalApt))/sd(frame$VerbalApt)
frame$score <- as.numeric(frame$score)
head(frame)
#fit lda model using whole data set
fit=lda(score ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt, data=frame)
print(fit)
plot(fit)
library(rms)
ologit<-lrm(score ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt, data=frame)
print(ologit)
ologit$scale.pred
plot(ologit)
predict(ologit, frame)
print(fit)
predict(fit, frame)
library(rms)
ologit<-lrm(score ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt, data=frame)
print(ologit)
plot(ologit)
predict(ologit, frame)
ologit$fail
ologit$info.matrix
predict(fit, frame)
predict(fit, frame)$x
predict(ologit, frame)$x
predict(ologit, frame)
predict(fit, frame)$x
predict(fit, frame)$
library(rms)
predict(fit, frame)
predict(ologit, frame)
predict(ologit, frame)
ologit<-lrm(score ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt+1, data=frame)
print(ologit)
predict(ologit, frame)
library(MASS)
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/hw7/HRdata2groups.csv")
head(frame)
frame_4level <- frame
head(frame_4level)
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/hw7/HRdata2groups.csv")
head(frame)
#standardize
frame$Termd<-(frame$Termd-mean(frame$Termd))/sd(frame$Termd)
frame$EmpStatusID<-(frame$EmpStatusID-mean(frame$EmpStatusID))/sd(frame$EmpStatusID)
frame$EmpSatisfaction<-(frame$EmpSatisfaction-mean(frame$EmpSatisfaction))/sd(frame$EmpSatisfaction)
frame$MechanicalApt<-(frame$MechanicalApt-mean(frame$MechanicalApt))/sd(frame$MechanicalApt)
frame$VerbalApt<-(frame$VerbalApt-mean(frame$VerbalApt))/sd(frame$VerbalApt)
frame_4level <- frame
frame_4level
library(MASS)
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/hw7/HRdata2groups.csv")
head(frame)
new_level <- list()
for (i in 1:nrow(frame)) {
if (frame[i, ]$PerfScoreID==1 | frame[i, ]$PerfScoreID==2) {
new_level <- append(new_level, 0)
} else {
new_level <- append(new_level, 1)
}
}
frame$score <- new_level
#standardize
frame$Termd<-(frame$Termd-mean(frame$Termd))/sd(frame$Termd)
frame$EmpStatusID<-(frame$EmpStatusID-mean(frame$EmpStatusID))/sd(frame$EmpStatusID)
frame$EmpSatisfaction<-(frame$EmpSatisfaction-mean(frame$EmpSatisfaction))/sd(frame$EmpSatisfaction)
frame$MechanicalApt<-(frame$MechanicalApt-mean(frame$MechanicalApt))/sd(frame$MechanicalApt)
frame$VerbalApt<-(frame$VerbalApt-mean(frame$VerbalApt))/sd(frame$VerbalApt)
frame$score <- as.numeric(frame$score)
head(frame)
ologit<-lrm(PerfScoreID  ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt+1, data=frame)
print(ologit)
predict(ologit, frame)
ologit<-lrm(PerfScoreID  ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt, data=frame)
print(ologit)
predict(ologit, frame)
ologit<-lrm(PerfScoreID  ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt+1, data=frame)
print(ologit)
predict(ologit, frame)
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
logit2prob(8.9293532)
#ordered logistic regression
library(rms)
frame<-read.csv("LoadData3Groups.csv")
head(frame)
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/ordered_logit/LoadData3Groups.csv")
head(frame)
ologit<-lrm(Group~Credit.Borrows.Score+Debt.to.Income, data=frame)
print(ologit)
#find the probability each observation belongs to each of the three groups
fitteddata<-predict(ologit,data=frame, type = "fitted.ind") # type = “fitted.ind” indicates that you
#want the output of this function to tell you the probability of each individual being in a each group
print(fitteddata)
frame2 <- data.frame(fitteddata)
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/hw7/HRdata2groups.csv")
head(frame)
source("~/Desktop/Data_Analytics/Data_Analytics_Code/hw7/hw7_Categories_and_Models.R", echo=TRUE)
new_level <- list()
for (i in 1:nrow(frame)) {
if (frame[i, ]$PerfScoreID==1 | frame[i, ]$PerfScoreID==2) {
new_level <- append(new_level, 0)
} else {
new_level <- append(new_level, 1)
}
}
frame$score <- new_level
#standardize
frame$Termd<-(frame$Termd-mean(frame$Termd))/sd(frame$Termd)
frame$EmpStatusID<-(frame$EmpStatusID-mean(frame$EmpStatusID))/sd(frame$EmpStatusID)
frame$EmpSatisfaction<-(frame$EmpSatisfaction-mean(frame$EmpSatisfaction))/sd(frame$EmpSatisfaction)
frame$MechanicalApt<-(frame$MechanicalApt-mean(frame$MechanicalApt))/sd(frame$MechanicalApt)
frame$VerbalApt<-(frame$VerbalApt-mean(frame$VerbalApt))/sd(frame$VerbalApt)
frame$score <- as.numeric(frame$score)
head(frame)
#fit lda model using whole data set
fit=lda(score ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt, data=frame)
print(fit)
plot(fit)
predict(fit, frame)
library(rms)
ologit<-lrm(score ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt+1, data=frame)
print(ologit)
predict(ologit, frame)
ologit<-lrm(PerfScoreID  ~ Termd+EmpStatusID+EmpSatisfaction+MechanicalApt+VerbalApt+1, data=frame)
print(ologit)
predict(ologit, frame)
#find the probability each observation belongs to each of the three groups
fitteddata<-predict(ologit,data=frame, type = "fitted.ind") # type = “fitted.ind” indicates that you
#want the output of this function to tell you the probability of each individual being in a each group
print(fitteddata)
library(e1071)
install.packages('e1071')
install.packages("e1071")
library(e1071)
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/hw7_NaiveBayes/NaiveBayesHW.csv")
head(frame)
NBModel<-naiveBayes(PerfScore~MechanicalApt, data=frame)
print(NBModel)
install.packages('e1071')
library(e1071)
install.packages("e1071")
install.packages("e1071")
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/hw7_NaiveBayes/NaiveBayesHW.csv")
head(frame)
NBModel<-naiveBayes(PerfScore~MechanicalApt, data=frame)
library(e1071)
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/hw7_NaiveBayes/NaiveBayesHW.csv")
head(frame)
NBModel<-naiveBayes(PerfScore~MechanicalApt, data=frame)
print(NBModel)
pred<-predict(NBModel, frame, type="raw") #type = “raw” specifies that R should return the probability that a point is in each risk group. Not specifying a type would print the most likely category that each point would fall into.
print(pred)
# classification tree
frame<-read.csv("/Users/chiaentsai/Desktop/Data_Analytics/Data_Analytics_Code/hw7_classification_trees/HRdata4groups.csv")
print(frame)
library(partykit)
# classification tree
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
# classification tree
install.packages("grid")
install.packages("grid")
install.packages("grid")
